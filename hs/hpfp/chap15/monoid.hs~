data Optional a = Nada | Only a deriving (Eq, Show)

instance Monoid a => Monoid (Optional a) where
  mempty = undefined
  mappend = undefined

-- data Booly a = False' | True' deriving (Eq, Show)

-- instance Monoid (Booly a) where
--   mappend False' _ = False'
--   mappend _ False' = False'
--   mappend True' True' = True'
