
==================== FINAL INTERFACE ====================
2019-07-07 17:34:17.571898071 UTC

interface addition-0.1.0.0-Hm86ig1ZulFGIAY4RW6HZA:Addition 8065
  interface hash: 45951a993b1eb9eea3c20882f6b0114f
  ABI hash: bd98b5d7436af07fb0b1a1907c551994
  export-list hash: d155b03a3459bd5a1f64aed45449bd8d
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 81c54bb85303292c9c9c961f73569c7b
  opt_hash: 6faf2de08de32d19db9870899d88e59a
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  plugin_hash: ad164012d6b1e14942349d58b1132007
  sig of: Nothing
  used TH splices: False
  where
exports:
  Addition.genBool
  Addition.genBool'
  Addition.genChar
  Addition.genEither
  Addition.genMaybe
  Addition.genMaybe'
  Addition.genOrdering
  Addition.genThreeple
  Addition.genTuple
  Addition.main
  Addition.oneThroughThree
  Addition.prop_additionGreater
  Addition.runQc
  Addition.trivialGen
  Addition.trivialInt
  Addition.Trivial{Addition.Trivial}
module dependencies:
package dependencies: HUnit-1.6.0.0 QuickCheck-2.12.6.1
                      ansi-terminal-0.8.2 array-0.5.3.0 base-4.12.0.0 call-stack-0.1.0
                      clock-0.7.2 colour-2.3.5 containers-0.6.0.1 deepseq-1.4.4.0
                      directory-1.3.3.0 erf-2.0.0.0 filepath-1.4.2.1 ghc-boot-th-8.6.5
                      ghc-prim-0.5.3 hspec-2.6.1 hspec-core-2.6.1
                      hspec-expectations-0.8.2 integer-gmp-1.0.2.0 pretty-1.1.3.6
                      primitive-0.6.4.0 quickcheck-io-0.2.0 random-1.1 setenv-0.1.1.3
                      stm-2.5.0.0 template-haskell-2.14.0.0 tf-random-0.5 time-1.8.0.2
                      transformers-0.5.6.2 unix-2.7.2.2
orphans: colour-2.3.5:Data.Colour
         quickcheck-io-0.2.0:Test.QuickCheck.IO
         stm-2.5.0.0:Control.Monad.STM
         transformers-0.5.6.2:Control.Monad.Trans.Error
         time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian base-4.12.0.0:GHC.Float
         base-4.12.0.0:GHC.Base
family instance modules: base-4.12.0.0:Control.Applicative
                         base-4.12.0.0:Data.Complex base-4.12.0.0:Data.Functor.Compose
                         base-4.12.0.0:Data.Functor.Const
                         base-4.12.0.0:Data.Functor.Identity
                         base-4.12.0.0:Data.Functor.Product base-4.12.0.0:Data.Functor.Sum
                         base-4.12.0.0:Data.Monoid base-4.12.0.0:Data.Semigroup
                         base-4.12.0.0:Data.Semigroup.Internal base-4.12.0.0:Data.Version
                         base-4.12.0.0:Data.Void base-4.12.0.0:GHC.Exts
                         base-4.12.0.0:GHC.Generics base-4.12.0.0:GHC.IO.Exception
                         clock-0.7.2:System.Clock containers-0.6.0.1:Data.IntMap.Internal
                         containers-0.6.0.1:Data.IntSet.Internal
                         containers-0.6.0.1:Data.Map.Internal
                         containers-0.6.0.1:Data.Sequence.Internal
                         containers-0.6.0.1:Data.Set.Internal
                         ghc-boot-th-8.6.5:GHC.ForeignSrcLang.Type
                         ghc-boot-th-8.6.5:GHC.LanguageExtensions.Type
                         hspec-core-2.6.1:Test.Hspec.Core.Example
                         pretty-1.1.3.6:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.6:Text.PrettyPrint.HughesPJ
                         primitive-0.6.4.0:Control.Monad.Primitive
                         primitive-0.6.4.0:Data.Primitive.ByteArray
                         template-haskell-2.14.0.0:Language.Haskell.TH.Syntax
import  -/  QuickCheck-2.12.6.1:Test.QuickCheck 22e1902781d29820fc86864e7e5b6791
import  -/  QuickCheck-2.12.6.1:Test.QuickCheck.Arbitrary 680caa283d6f5fee1c08f7aa6a51e8be
import  -/  QuickCheck-2.12.6.1:Test.QuickCheck.Gen cc8ef82ad73b94cee8b3647cb0a81f7f
import  -/  QuickCheck-2.12.6.1:Test.QuickCheck.Test ccd615c8093d1dbc1037d3e74f5aac35
import  -/  base-4.12.0.0:Data.Either 423bee738f25e5ee983d072216009be8
import  -/  base-4.12.0.0:GHC.Base c00b75f0b052d05c55ba6a4dd1c63b26
import  -/  base-4.12.0.0:GHC.Num c2039f03637c68f47b0bbff4c18ec616
import  -/  base-4.12.0.0:GHC.Show 838a5d039379d82d9626aae53dfce276
import  -/  base-4.12.0.0:Prelude 3c779dfd6448bdd8e234c336802c2acb
import  -/  ghc-prim-0.5.3:GHC.Classes 0f6fd7d7db53fc48f6e1f01803cc6c9d
import  -/  ghc-prim-0.5.3:GHC.Types 57064c9f957b09bc2e360061ad5cae0b
import  -/  hspec-2.6.1:Test.Hspec 0ba3f17be1138e2640bda975bf00448f
dc06ef40cc934101abfb4101c33bf939
  $fArbitraryTrivial ::
    Test.QuickCheck.Arbitrary.Arbitrary Addition.Trivial
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Addition.Trivial
                  Addition.$fArbitraryTrivial1
                    `cast`
                  (Sym (Test.QuickCheck.Gen.N:Gen[0] <Addition.Trivial>_R))
                  Addition.$fArbitraryTrivial_$cshrink -}
dc06ef40cc934101abfb4101c33bf939
  $fArbitraryTrivial1 ::
    Test.QuickCheck.Random.QCGen -> GHC.Types.Int -> Addition.Trivial
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><L,A>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Test.QuickCheck.Random.QCGen) (ds1 :: GHC.Types.Int) ->
                 Addition.Trivial) -}
dc06ef40cc934101abfb4101c33bf939
  $fArbitraryTrivial_$cshrink ::
    Addition.Trivial -> [Addition.Trivial]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ (ds :: Addition.Trivial) -> GHC.Types.[] @ Addition.Trivial) -}
dc06ef40cc934101abfb4101c33bf939
  $fEqTrivial :: GHC.Classes.Eq Addition.Trivial
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Addition.Trivial
                  Addition.$fEqTrivial_$c==
                  Addition.$fEqTrivial_$c/= -}
dc06ef40cc934101abfb4101c33bf939
  $fEqTrivial_$c/= ::
    Addition.Trivial -> Addition.Trivial -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*H><S,1*H>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Addition.Trivial) (y :: Addition.Trivial) ->
                 case x of wild { Addition.Trivial ->
                 case y of wild1 { Addition.Trivial -> GHC.Types.False } }) -}
dc06ef40cc934101abfb4101c33bf939
  $fEqTrivial_$c== ::
    Addition.Trivial -> Addition.Trivial -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*H><S,1*H>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: Addition.Trivial) (ds1 :: Addition.Trivial) ->
                 case ds of wild { Addition.Trivial ->
                 case ds1 of wild1 { Addition.Trivial -> GHC.Types.True } }) -}
dc06ef40cc934101abfb4101c33bf939
  $fShowTrivial :: GHC.Show.Show Addition.Trivial
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Addition.Trivial
                  Addition.$fShowTrivial_$cshowsPrec
                  Addition.$fShowTrivial_$cshow
                  Addition.$fShowTrivial_$cshowList -}
dc06ef40cc934101abfb4101c33bf939
  $fShowTrivial1 :: Addition.Trivial -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*H><L,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: Addition.Trivial) (eta :: GHC.Base.String) ->
                 case ds of wild { Addition.Trivial ->
                 GHC.Base.augment
                   @ GHC.Types.Char
                   (\ @ b
                      (c :: GHC.Types.Char -> b -> b)[OneShot]
                      (n :: b)[OneShot] ->
                    GHC.Base.foldr @ GHC.Types.Char @ b c n Addition.$fShowTrivial2)
                   eta }) -}
c0a5cfa4d8b2799a4a6322e115858aee
  $fShowTrivial2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Addition.$fShowTrivial3) -}
fd7ac18aa7d4aa0ef18fdeea7b882bc3
  $fShowTrivial3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Trivial"#) -}
dc06ef40cc934101abfb4101c33bf939
  $fShowTrivial_$cshow :: Addition.Trivial -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*H>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Addition.Trivial) ->
                 case x of wild { Addition.Trivial -> Addition.$fShowTrivial2 }) -}
dc06ef40cc934101abfb4101c33bf939
  $fShowTrivial_$cshowList :: [Addition.Trivial] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Addition.Trivial]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Addition.Trivial
                   Addition.$fShowTrivial1
                   ls
                   s) -}
dc06ef40cc934101abfb4101c33bf939
  $fShowTrivial_$cshowsPrec ::
    GHC.Types.Int -> Addition.Trivial -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*H><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ (ds :: GHC.Types.Int)
                   (ds1 :: Addition.Trivial)
                   (eta :: GHC.Base.String) ->
                 case ds1 of wild { Addition.Trivial ->
                 GHC.Base.augment
                   @ GHC.Types.Char
                   (\ @ b
                      (c :: GHC.Types.Char -> b -> b)[OneShot]
                      (n :: b)[OneShot] ->
                    GHC.Base.foldr @ GHC.Types.Char @ b c n Addition.$fShowTrivial2)
                   eta }) -}
7d5bad1ae2eb791bf080e744a6796441
  $tc'Trivial :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15685357915721296863##
                   5719990382279871571##
                   Addition.$trModule
                   Addition.$tc'Trivial2
                   0#
                   Addition.$tc'Trivial1) -}
fbea58f62cf1f06caa0a1482913dadce
  $tc'Trivial1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m1, Inline: [~] -}
fc2affe616b9271c8610ea5af05a9946
  $tc'Trivial2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Addition.$tc'Trivial3) -}
efcf342f90cbb3d19d5bdfccbb0b436e
  $tc'Trivial3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Trivial"#) -}
a3fb4c0993dcda4cce42b9c6ac8985ab
  $tcTrivial :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10911402342755431883##
                   16805148354590706117##
                   Addition.$trModule
                   Addition.$tcTrivial1
                   0#
                   GHC.Types.krep$*) -}
a0013aa2f3e0e908c5ae2ce2f7507c3c
  $tcTrivial1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Addition.$fShowTrivial3) -}
0191345ebafba200cd6722c34ced1d17
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Addition.$trModule3
                   Addition.$trModule1) -}
692463fb853424177da1e6962c798674
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Addition.$trModule2) -}
bc31f9c65be710640590c02adedf3f1a
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Addition"#) -}
b79d7ba61183928e2b3345d2ad1cb093
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Addition.$trModule4) -}
0d7d91aca29ccccaeb0cb717e843e62f
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("addition-0.1.0.0-Hm86ig1ZulFGIAY4RW6HZA"#) -}
63d9e0a48dc06092e716ed40e04cd451
  $wgenBool :: Test.QuickCheck.Random.QCGen -> GHC.Types.Bool
  {- Arity: 1, Strictness: <L,U>, Inline: [2],
     Unfolding: (\ (w :: Test.QuickCheck.Random.QCGen) ->
                 case System.Random.$wrandomIvalInteger
                        @ Test.QuickCheck.Random.QCGen
                        @ GHC.Types.Int
                        Test.QuickCheck.Random.$fRandomGenQCGen
                        GHC.Num.$fNumInt
                        System.Random.$dmrandomIO3
                        System.Random.$fRandomBool3
                        w of ww2 { (#,#) ww3 ww4 ->
                 case ww3 of wild2 { GHC.Types.I# ds ->
                 case ds of ds1 {
                   DEFAULT -> GHC.Types.True 0# -> GHC.Types.False } } }) -}
bd21016b7b6d9371ea1415900909ec3c
  $wgenEither ::
    (Test.QuickCheck.Arbitrary.Arbitrary a,
     Test.QuickCheck.Arbitrary.Arbitrary b) =>
    GHC.Prim.ByteArray#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> Data.Either.Either a b
  {- Arity: 7,
     Strictness: <L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><S,U><S,U><S,U><S,1*U><L,U>,
     Inline: [2],
     Unfolding: (\ @ a
                   @ b
                   (w :: Test.QuickCheck.Arbitrary.Arbitrary a)
                   (w1 :: Test.QuickCheck.Arbitrary.Arbitrary b)
                   (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Word#)
                   (ww2 :: GHC.Prim.Word#)
                   (ww3 :: GHC.Prim.Int#)
                   (w2 :: GHC.Types.Int) ->
                 case System.Random.TF.Gen.$wtfGenSplit
                        ww
                        ww1
                        ww2
                        ww3 of ww7 { (#,#) ww8 ww9 ->
                 case ww9 of ww4 { System.Random.TF.Gen.TFGen ww5 ww6 ww10 ww11 ww12 ww13 ->
                 case System.Random.TF.Gen.$wtfGenSplit
                        ww5
                        ww6
                        ww10
                        ww11 of ww14 { (#,#) ww15 ww16 ->
                 (Test.QuickCheck.Gen.elements
                    @ (Data.Either.Either a b)
                    (GHC.Types.:
                       @ (Data.Either.Either a b)
                       (Data.Either.Left
                          @ a
                          @ b
                          ((Test.QuickCheck.Arbitrary.arbitrary @ a w)
                             `cast`
                           (Test.QuickCheck.Gen.N:Gen[0] <a>_R)
                             ww8 `cast` (Sym (Test.QuickCheck.Random.N:QCGen[0]))
                             w2))
                       (GHC.Types.:
                          @ (Data.Either.Either a b)
                          (Data.Either.Right
                             @ a
                             @ b
                             ((Test.QuickCheck.Arbitrary.arbitrary @ b w1)
                                `cast`
                              (Test.QuickCheck.Gen.N:Gen[0] <b>_R)
                                ww15 `cast` (Sym (Test.QuickCheck.Random.N:QCGen[0]))
                                w2))
                          (GHC.Types.[] @ (Data.Either.Either a b)))))
                   `cast`
                 (Test.QuickCheck.Gen.N:Gen[0] <Data.Either.Either a b>_R)
                   ww16 `cast` (Sym (Test.QuickCheck.Random.N:QCGen[0]))
                   w2 } } }) -}
5881837229e177744c6ee214d4d7ce8d
  $wgenMaybe ::
    Test.QuickCheck.Arbitrary.Arbitrary a =>
    GHC.Prim.ByteArray#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> GHC.Maybe.Maybe a
  {- Arity: 6,
     Strictness: <L,1*U(1*C1(C1(U)),A)><S,U><S,U><S,U><S,1*U><L,U>,
     Inline: [2],
     Unfolding: (\ @ a
                   (w :: Test.QuickCheck.Arbitrary.Arbitrary a)
                   (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Word#)
                   (ww2 :: GHC.Prim.Word#)
                   (ww3 :: GHC.Prim.Int#)
                   (w1 :: GHC.Types.Int) ->
                 case System.Random.TF.Gen.$wtfGenSplit
                        ww
                        ww1
                        ww2
                        ww3 of ww7 { (#,#) ww8 ww9 ->
                 (Test.QuickCheck.Gen.elements
                    @ (GHC.Maybe.Maybe a)
                    (GHC.Types.:
                       @ (GHC.Maybe.Maybe a)
                       (GHC.Maybe.Nothing @ a)
                       (GHC.Types.:
                          @ (GHC.Maybe.Maybe a)
                          (GHC.Maybe.Just
                             @ a
                             ((Test.QuickCheck.Arbitrary.arbitrary @ a w)
                                `cast`
                              (Test.QuickCheck.Gen.N:Gen[0] <a>_R)
                                ww8 `cast` (Sym (Test.QuickCheck.Random.N:QCGen[0]))
                                w1))
                          (GHC.Types.[] @ (GHC.Maybe.Maybe a)))))
                   `cast`
                 (Test.QuickCheck.Gen.N:Gen[0] <GHC.Maybe.Maybe a>_R)
                   ww9 `cast` (Sym (Test.QuickCheck.Random.N:QCGen[0]))
                   w1 }) -}
86e8bd5433a1fd209fa4ed94bc78584c
  $wgenMaybe' ::
    Test.QuickCheck.Arbitrary.Arbitrary a =>
    GHC.Prim.ByteArray#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> GHC.Maybe.Maybe a
  {- Arity: 6,
     Strictness: <L,1*U(1*C1(C1(U)),A)><S,U><S,U><S,U><S,1*U><L,U>,
     Inline: [2],
     Unfolding: (\ @ a
                   (w :: Test.QuickCheck.Arbitrary.Arbitrary a)
                   (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Word#)
                   (ww2 :: GHC.Prim.Word#)
                   (ww3 :: GHC.Prim.Int#)
                   (w1 :: GHC.Types.Int) ->
                 case System.Random.TF.Gen.$wtfGenSplit
                        ww
                        ww1
                        ww2
                        ww3 of ww7 { (#,#) ww8 ww9 ->
                 let {
                   a1 :: a
                   = (Test.QuickCheck.Arbitrary.arbitrary @ a w)
                       `cast`
                     (Test.QuickCheck.Gen.N:Gen[0] <a>_R)
                       ww8 `cast` (Sym (Test.QuickCheck.Random.N:QCGen[0]))
                       w1
                 } in
                 (Test.QuickCheck.Gen.frequency
                    @ (GHC.Maybe.Maybe a)
                    (GHC.Types.:
                       @ (GHC.Types.Int, Test.QuickCheck.Gen.Gen (GHC.Maybe.Maybe a))
                       (Addition.genMaybe'3 @ a)
                       (GHC.Types.:
                          @ (GHC.Types.Int, Test.QuickCheck.Gen.Gen (GHC.Maybe.Maybe a))
                          (Addition.genMaybe'2,
                           let {
                             x :: GHC.Maybe.Maybe a = GHC.Maybe.Just @ a a1
                           } in
                           (\ (ds :: Test.QuickCheck.Random.QCGen) (ds1 :: GHC.Types.Int) ->
                            x)
                             `cast`
                           (Sym (Test.QuickCheck.Gen.N:Gen[0] <GHC.Maybe.Maybe a>_R)))
                          (GHC.Types.[]
                             @ (GHC.Types.Int, Test.QuickCheck.Gen.Gen (GHC.Maybe.Maybe a))))))
                   `cast`
                 (Test.QuickCheck.Gen.N:Gen[0] <GHC.Maybe.Maybe a>_R)
                   ww9 `cast` (Sym (Test.QuickCheck.Random.N:QCGen[0]))
                   w1 }) -}
3c85ba9584de5eb7281af3bd084e8ffd
  $wgenThreeple ::
    (Test.QuickCheck.Arbitrary.Arbitrary a,
     Test.QuickCheck.Arbitrary.Arbitrary b,
     Test.QuickCheck.Arbitrary.Arbitrary c) =>
    GHC.Prim.ByteArray#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> (# a, b, c #)
  {- Arity: 8, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><S,U><S,U><S,U><S,1*U><L,U>,
     Inline: [2],
     Unfolding: (\ @ a
                   @ b
                   @ c
                   (w :: Test.QuickCheck.Arbitrary.Arbitrary a)
                   (w1 :: Test.QuickCheck.Arbitrary.Arbitrary b)
                   (w2 :: Test.QuickCheck.Arbitrary.Arbitrary c)
                   (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Word#)
                   (ww2 :: GHC.Prim.Word#)
                   (ww3 :: GHC.Prim.Int#)
                   (w3 :: GHC.Types.Int) ->
                 case System.Random.TF.Gen.$wtfGenSplit
                        ww
                        ww1
                        ww2
                        ww3 of ww7 { (#,#) ww8 ww9 ->
                 case ww9 of ww4 { System.Random.TF.Gen.TFGen ww5 ww6 ww10 ww11 ww12 ww13 ->
                 case System.Random.TF.Gen.$wtfGenSplit
                        ww5
                        ww6
                        ww10
                        ww11 of ww14 { (#,#) ww15 ww16 ->
                 case ww16 of ww17 { System.Random.TF.Gen.TFGen ww18 ww19 ww20 ww21 ww22 ww23 ->
                 case System.Random.TF.Gen.$wtfGenSplit
                        ww18
                        ww19
                        ww20
                        ww21 of ww24 { (#,#) ww25 ww26 ->
                 (# (Test.QuickCheck.Arbitrary.arbitrary @ a w)
                      `cast`
                    (Test.QuickCheck.Gen.N:Gen[0] <a>_R)
                      ww8 `cast` (Sym (Test.QuickCheck.Random.N:QCGen[0]))
                      w3,
                    (Test.QuickCheck.Arbitrary.arbitrary @ b w1)
                      `cast`
                    (Test.QuickCheck.Gen.N:Gen[0] <b>_R)
                      ww15 `cast` (Sym (Test.QuickCheck.Random.N:QCGen[0]))
                      w3,
                    (Test.QuickCheck.Arbitrary.arbitrary @ c w2)
                      `cast`
                    (Test.QuickCheck.Gen.N:Gen[0] <c>_R)
                      ww25 `cast` (Sym (Test.QuickCheck.Random.N:QCGen[0]))
                      w3 #) } } } } }) -}
ea15a645c78cc8a727ba3c1da94c4f39
  $wgenTuple ::
    (Test.QuickCheck.Arbitrary.Arbitrary a,
     Test.QuickCheck.Arbitrary.Arbitrary b) =>
    GHC.Prim.ByteArray#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> (# a, b #)
  {- Arity: 7, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><S,U><S,U><S,U><S,1*U><L,U>,
     Inline: [2],
     Unfolding: (\ @ a
                   @ b
                   (w :: Test.QuickCheck.Arbitrary.Arbitrary a)
                   (w1 :: Test.QuickCheck.Arbitrary.Arbitrary b)
                   (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Word#)
                   (ww2 :: GHC.Prim.Word#)
                   (ww3 :: GHC.Prim.Int#)
                   (w2 :: GHC.Types.Int) ->
                 case System.Random.TF.Gen.$wtfGenSplit
                        ww
                        ww1
                        ww2
                        ww3 of ww7 { (#,#) ww8 ww9 ->
                 case ww9 of ww4 { System.Random.TF.Gen.TFGen ww5 ww6 ww10 ww11 ww12 ww13 ->
                 case System.Random.TF.Gen.$wtfGenSplit
                        ww5
                        ww6
                        ww10
                        ww11 of ww14 { (#,#) ww15 ww16 ->
                 (# (Test.QuickCheck.Arbitrary.arbitrary @ a w)
                      `cast`
                    (Test.QuickCheck.Gen.N:Gen[0] <a>_R)
                      ww8 `cast` (Sym (Test.QuickCheck.Random.N:QCGen[0]))
                      w2,
                    (Test.QuickCheck.Arbitrary.arbitrary @ b w1)
                      `cast`
                    (Test.QuickCheck.Gen.N:Gen[0] <b>_R)
                      ww15 `cast` (Sym (Test.QuickCheck.Random.N:QCGen[0]))
                      w2 #) } } }) -}
aabdf7b16515fbdc896682e3c590ca1b
  $wlvl128 ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 5, Strictness: <S,U><S,U><S,U><S,1*U><L,U>, Inline: [2],
     Unfolding: (\ (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Word#)
                   (ww2 :: GHC.Prim.Word#)
                   (ww3 :: GHC.Prim.Int#)
                   (w :: GHC.Types.Int) ->
                 Test.QuickCheck.Property.$w$cproperty
                   @ GHC.Types.Int
                   @ GHC.Types.Bool
                   Test.QuickCheck.Arbitrary.$fArbitraryInt
                   GHC.Show.$fShowInt
                   Test.QuickCheck.Property.$fTestableBool_$cproperty
                     `cast`
                   (Sym (Test.QuickCheck.Property.N:Testable[0] <GHC.Types.Bool>_N))
                   Addition.prop_additionGreater
                   ww
                   ww1
                   ww2
                   ww3
                   w) -}
dc06ef40cc934101abfb4101c33bf939
  data Trivial = Trivial
519e2c75d8fe073cbc1421e9c8537143
  genBool :: Test.QuickCheck.Gen.Gen GHC.Types.Bool
  {- Arity: 2, Strictness: <L,U><L,A>,
     Unfolding: InlineRule (0, True, True)
                Addition.genBool1
                  `cast`
                (Sym (Test.QuickCheck.Gen.N:Gen[0] <GHC.Types.Bool>_R)) -}
0f7ff1d8841eb76882a4ab942c354f07
  genBool' :: Test.QuickCheck.Gen.Gen GHC.Types.Bool
  {- Unfolding: (Test.QuickCheck.Gen.elements
                   @ GHC.Types.Bool
                   Addition.genBool'1) -}
ff06ea0cd748e6a6c53eea5cf114b4b6
  genBool'1 :: [GHC.Types.Bool]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Bool
                   GHC.Types.False
                   Addition.genBool'2) -}
aa833c6bf068655ec7e881cc2d850907
  genBool'2 :: [GHC.Types.Bool]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Bool
                   GHC.Types.True
                   (GHC.Types.[] @ GHC.Types.Bool)) -}
4a689911fc14c3d158c37536ed139fad
  genBool1 ::
    Test.QuickCheck.Random.QCGen -> GHC.Types.Int -> GHC.Types.Bool
  {- Arity: 2, Strictness: <L,U><L,A>, Inline: [2],
     Unfolding: InlineRule (2, True, True)
                (\ (w :: Test.QuickCheck.Random.QCGen) (w1 :: GHC.Types.Int) ->
                 Addition.$wgenBool w) -}
d5fde563e5b839fa7cef77d66240f3bf
  genChar :: Test.QuickCheck.Gen.Gen GHC.Types.Char
  {- Unfolding: (Test.QuickCheck.Gen.elements
                   @ GHC.Types.Char
                   (GHC.Enum.eftChar 97# 122#)) -}
92c0cf04bf4c638efa7b6f811303f6ed
  genEither ::
    (Test.QuickCheck.Arbitrary.Arbitrary a,
     Test.QuickCheck.Arbitrary.Arbitrary b) =>
    Test.QuickCheck.Gen.Gen (Data.Either.Either a b)
  {- Arity: 4,
     Strictness: <L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U>,
     Unfolding: InlineRule (0, True, True)
                Addition.genEither1
                  `cast`
                (forall (a :: <*>_N) (b :: <*>_N).
                 <Test.QuickCheck.Arbitrary.Arbitrary a>_R
                 ->_R <Test.QuickCheck.Arbitrary.Arbitrary b>_R
                 ->_R Sym (Test.QuickCheck.Gen.N:Gen[0]
                               <Data.Either.Either a b>_R)) -}
2189dcfb4ecc6183698a2fbdea19c8b9
  genEither1 ::
    (Test.QuickCheck.Arbitrary.Arbitrary a,
     Test.QuickCheck.Arbitrary.Arbitrary b) =>
    Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int -> Data.Either.Either a b
  {- Arity: 4,
     Strictness: <L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U>,
     Inline: [2],
     Unfolding: InlineRule (4, True, False)
                (\ @ a
                   @ b
                   (w :: Test.QuickCheck.Arbitrary.Arbitrary a)
                   (w1 :: Test.QuickCheck.Arbitrary.Arbitrary b)
                   (w2 :: Test.QuickCheck.Random.QCGen)
                   (w3 :: GHC.Types.Int) ->
                 case w2
                        `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Addition.$wgenEither @ a @ b w w1 ww1 ww2 ww3 ww4 w3 }) -}
5dd37f78555f7857c048bfe7a160168f
  genMaybe ::
    Test.QuickCheck.Arbitrary.Arbitrary a =>
    Test.QuickCheck.Gen.Gen (GHC.Maybe.Maybe a)
  {- Arity: 3,
     Strictness: <L,1*U(1*C1(C1(U)),A)><S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U>,
     Unfolding: InlineRule (0, True, True)
                Addition.genMaybe1
                  `cast`
                (forall (a :: <*>_N).
                 <Test.QuickCheck.Arbitrary.Arbitrary a>_R
                 ->_R Sym (Test.QuickCheck.Gen.N:Gen[0] <GHC.Maybe.Maybe a>_R)) -}
16f298b902083e8c1449307facfefab2
  genMaybe' ::
    Test.QuickCheck.Arbitrary.Arbitrary a =>
    Test.QuickCheck.Gen.Gen (GHC.Maybe.Maybe a)
  {- Arity: 3,
     Strictness: <L,1*U(1*C1(C1(U)),A)><S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U>,
     Unfolding: InlineRule (0, True, True)
                Addition.genMaybe'1
                  `cast`
                (forall (a :: <*>_N).
                 <Test.QuickCheck.Arbitrary.Arbitrary a>_R
                 ->_R Sym (Test.QuickCheck.Gen.N:Gen[0] <GHC.Maybe.Maybe a>_R)) -}
878db8f6fd2abfe5dbea7812eca43f3e
  genMaybe'1 ::
    Test.QuickCheck.Arbitrary.Arbitrary a =>
    Test.QuickCheck.Random.QCGen -> GHC.Types.Int -> GHC.Maybe.Maybe a
  {- Arity: 3,
     Strictness: <L,1*U(1*C1(C1(U)),A)><S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U>,
     Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   (w :: Test.QuickCheck.Arbitrary.Arbitrary a)
                   (w1 :: Test.QuickCheck.Random.QCGen)
                   (w2 :: GHC.Types.Int) ->
                 case w1
                        `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Addition.$wgenMaybe' @ a w ww1 ww2 ww3 ww4 w2 }) -}
522ec173f6100cbc6b9733f443d1c7a7
  genMaybe'2 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 3#) -}
b4ad603ff7d3c20d95872088c7936af7
  genMaybe'3 ::
    (GHC.Types.Int, Test.QuickCheck.Gen.Gen (GHC.Maybe.Maybe a))
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (\ @ a ->
                 (Addition.genMaybe'5,
                  (Addition.genMaybe'4 @ a)
                    `cast`
                  (Sym (Test.QuickCheck.Gen.N:Gen[0] <GHC.Maybe.Maybe a>_R)))) -}
a7e20fe66c90c51d1e00f57d4a22d7b7
  genMaybe'4 ::
    Test.QuickCheck.Random.QCGen -> GHC.Types.Int -> GHC.Maybe.Maybe a
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><L,A>,
     Unfolding: (\ @ a
                   (ds :: Test.QuickCheck.Random.QCGen)
                   (ds1 :: GHC.Types.Int) ->
                 GHC.Maybe.Nothing @ a) -}
44a04116f153c93625f73347803663d2
  genMaybe'5 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 1#) -}
8607ffed19dc62312c723f58e2e4035b
  genMaybe1 ::
    Test.QuickCheck.Arbitrary.Arbitrary a =>
    Test.QuickCheck.Random.QCGen -> GHC.Types.Int -> GHC.Maybe.Maybe a
  {- Arity: 3,
     Strictness: <L,1*U(1*C1(C1(U)),A)><S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U>,
     Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   (w :: Test.QuickCheck.Arbitrary.Arbitrary a)
                   (w1 :: Test.QuickCheck.Random.QCGen)
                   (w2 :: GHC.Types.Int) ->
                 case w1
                        `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Addition.$wgenMaybe @ a w ww1 ww2 ww3 ww4 w2 }) -}
f11fd931b0ece46811b8d311dcdbf1be
  genOrdering :: Test.QuickCheck.Gen.Gen GHC.Types.Ordering
  {- Unfolding: (Test.QuickCheck.Gen.elements
                   @ GHC.Types.Ordering
                   Addition.genOrdering1) -}
a8614ae93392e028f6536986909385e4
  genOrdering1 :: [GHC.Types.Ordering]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Ordering
                   GHC.Types.LT
                   Addition.genOrdering2) -}
7a35a414f2201e7ff29a7ab32ad40656
  genOrdering2 :: [GHC.Types.Ordering]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Ordering
                   GHC.Types.EQ
                   Addition.genOrdering3) -}
73d7ba71f65d57612c93d1898f0d9786
  genOrdering3 :: [GHC.Types.Ordering]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Ordering
                   GHC.Types.GT
                   (GHC.Types.[] @ GHC.Types.Ordering)) -}
93f02fd58f92b05b059b8106eaf35c82
  genThreeple ::
    (Test.QuickCheck.Arbitrary.Arbitrary a,
     Test.QuickCheck.Arbitrary.Arbitrary b,
     Test.QuickCheck.Arbitrary.Arbitrary c) =>
    Test.QuickCheck.Gen.Gen (a, b, c)
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U>m,
     Unfolding: InlineRule (0, True, True)
                Addition.genThreeple1
                  `cast`
                (forall (a :: <*>_N) (b :: <*>_N) (c :: <*>_N).
                 <Test.QuickCheck.Arbitrary.Arbitrary a>_R
                 ->_R <Test.QuickCheck.Arbitrary.Arbitrary b>_R
                 ->_R <Test.QuickCheck.Arbitrary.Arbitrary c>_R
                 ->_R Sym (Test.QuickCheck.Gen.N:Gen[0] <(a, b, c)>_R)) -}
ed701fcd08134cd155dd27851e310311
  genThreeple1 ::
    (Test.QuickCheck.Arbitrary.Arbitrary a,
     Test.QuickCheck.Arbitrary.Arbitrary b,
     Test.QuickCheck.Arbitrary.Arbitrary c) =>
    Test.QuickCheck.Random.QCGen -> GHC.Types.Int -> (a, b, c)
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U>m,
     Inline: [2],
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   @ b
                   @ c
                   (w :: Test.QuickCheck.Arbitrary.Arbitrary a)
                   (w1 :: Test.QuickCheck.Arbitrary.Arbitrary b)
                   (w2 :: Test.QuickCheck.Arbitrary.Arbitrary c)
                   (w3 :: Test.QuickCheck.Random.QCGen)
                   (w4 :: GHC.Types.Int) ->
                 case w3
                        `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 case Addition.$wgenThreeple
                        @ a
                        @ b
                        @ c
                        w
                        w1
                        w2
                        ww1
                        ww2
                        ww3
                        ww4
                        w4 of ww7 { (#,,#) ww8 ww9 ww10 ->
                 (ww8, ww9, ww10) } }) -}
c93e1e701211c9fb83d42ac0606629a4
  genTuple ::
    (Test.QuickCheck.Arbitrary.Arbitrary a,
     Test.QuickCheck.Arbitrary.Arbitrary b) =>
    Test.QuickCheck.Gen.Gen (a, b)
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U>m,
     Unfolding: InlineRule (0, True, True)
                Addition.genTuple1
                  `cast`
                (forall (a :: <*>_N) (b :: <*>_N).
                 <Test.QuickCheck.Arbitrary.Arbitrary a>_R
                 ->_R <Test.QuickCheck.Arbitrary.Arbitrary b>_R
                 ->_R Sym (Test.QuickCheck.Gen.N:Gen[0] <(a, b)>_R)) -}
d2e16278115095c2dba27de5449b94a7
  genTuple1 ::
    (Test.QuickCheck.Arbitrary.Arbitrary a,
     Test.QuickCheck.Arbitrary.Arbitrary b) =>
    Test.QuickCheck.Random.QCGen -> GHC.Types.Int -> (a, b)
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U>m,
     Inline: [2],
     Unfolding: InlineRule (4, True, False)
                (\ @ a
                   @ b
                   (w :: Test.QuickCheck.Arbitrary.Arbitrary a)
                   (w1 :: Test.QuickCheck.Arbitrary.Arbitrary b)
                   (w2 :: Test.QuickCheck.Random.QCGen)
                   (w3 :: GHC.Types.Int) ->
                 case w2
                        `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 case Addition.$wgenTuple
                        @ a
                        @ b
                        w
                        w1
                        ww1
                        ww2
                        ww3
                        ww4
                        w3 of ww7 { (#,#) ww8 ww9 ->
                 (ww8, ww9) } }) -}
8d9a64295dec1266f137128506d9a4b4
  main :: GHC.Types.IO ()
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                Addition.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
e24ad4dde6051f2e2db66bd5338e2397
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (Test.QuickCheck.Gen.sample1
                   @ Addition.Trivial
                   Addition.$fShowTrivial
                   Addition.$fArbitraryTrivial1
                     `cast`
                   (Sym (Test.QuickCheck.Gen.N:Gen[0] <Addition.Trivial>_R))) -}
27a200a9448c2a04e966075defd27915
  oneThroughThree :: Test.QuickCheck.Gen.Gen GHC.Types.Int
  {- Unfolding: (Test.QuickCheck.Gen.elements
                   @ GHC.Types.Int
                   Addition.oneThroughThree1) -}
e84608e629d9c3148c6a2624db5c1a60
  oneThroughThree1 :: [GHC.Types.Int]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Int
                   Addition.genMaybe'5
                   Addition.oneThroughThree2) -}
260729f5b721910a8f41316034b197e0
  oneThroughThree2 :: [GHC.Types.Int]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Int
                   Addition.oneThroughThree7
                   Addition.oneThroughThree3) -}
130529c6d21f2276d0015d8115c9fbde
  oneThroughThree3 :: [GHC.Types.Int]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Int
                   Addition.oneThroughThree7
                   Addition.oneThroughThree4) -}
80d27aaab7d283312e2d6d243cbf5805
  oneThroughThree4 :: [GHC.Types.Int]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Int
                   Addition.genMaybe'2
                   Addition.oneThroughThree5) -}
5f71244b9203308d7d2495afe65b6458
  oneThroughThree5 :: [GHC.Types.Int]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Int
                   Addition.genMaybe'2
                   Addition.oneThroughThree6) -}
d4bcd6a33c41fa8a84879392a9246074
  oneThroughThree6 :: [GHC.Types.Int]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Int
                   Addition.genMaybe'2
                   (GHC.Types.[] @ GHC.Types.Int)) -}
8363f7066ee34cb26a6af5ddb8e7a27f
  oneThroughThree7 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 2#) -}
e5f7ed36d94abd874c8bd16dc15d4a2c
  prop_additionGreater :: GHC.Types.Int -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: GHC.Types.Int) ->
                 case x of wild { GHC.Types.I# x1 ->
                 GHC.Prim.tagToEnum#
                   @ GHC.Types.Bool
                   (GHC.Prim.># (GHC.Prim.+# x1 1#) x1) }) -}
69e76d3e17b5f90c606cd9c909c390fc
  runQc :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Addition.runQc1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
d50c5e1307042ff57b97a9f0efa58086
  runQc1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case Test.QuickCheck.Test.$wwithState
                        @ Test.QuickCheck.Test.Result
                        (GHC.Maybe.Nothing @ (Test.QuickCheck.Random.QCGen, GHC.Types.Int))
                        Test.QuickCheck.Test.quickCheck5
                        Test.QuickCheck.Test.quickCheck4
                        Test.QuickCheck.Test.quickCheck5
                        GHC.Types.True
                        GHC.Base.maxInt
                        Addition.runQc2
                          `cast`
                        (<Test.QuickCheck.State.State>_R
                         ->_R Sym (GHC.Types.N:IO[0] <Test.QuickCheck.Test.Result>_R))
                        s of ds3 { (#,#) ipv ipv1 ->
                 (# ipv, GHC.Tuple.() #) }) -}
27e624f0efa6b5dd15f4a0c8c970edb8
  runQc2 ::
    Test.QuickCheck.State.State
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Test.QuickCheck.Test.Result #)
  {- Arity: 2,
     Strictness: <S(S(LS(S)LC(C(S(SL))))S(S)LLLLSLLSSSSSSLLL),1*U(U(U(U),U(U),U,U),U(U),U(U),U,U,U,U,U,U,U,U,U,U,U,U(U,U,U,U,U,U),U,U,U)><S,U>,
     Unfolding: (\ (s1 :: Test.QuickCheck.State.State)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 Test.QuickCheck.Test.quickCheck2
                   s1
                   Addition.runQc3
                     `cast`
                   (Nth:3
                        (<GHC.Types.Int -> GHC.Types.Bool>_R
                         ->_R Sym (Test.QuickCheck.Gen.N:Gen[0]
                                       (Test.QuickCheck.Property.N:Prop[0])) ; Sym (Test.QuickCheck.Property.N:Property[0])))
                   eta) -}
806f9989352f98d59ab75cd0d38cb67c
  runQc3 ::
    Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 2, Strictness: <S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U>,
     Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Test.QuickCheck.Random.QCGen) (w1 :: GHC.Types.Int) ->
                 case w `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Addition.$wlvl128 ww1 ww2 ww3 ww4 w1 }) -}
9619aa74f81107728debeadca46ff5c4
  trivialGen :: Test.QuickCheck.Gen.Gen Addition.Trivial
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><L,A>,
     Unfolding: InlineRule (0, True, True)
                Addition.$fArbitraryTrivial1
                  `cast`
                (Sym (Test.QuickCheck.Gen.N:Gen[0] <Addition.Trivial>_R)) -}
b74e28af9e503f59140a12e737ad3fcf
  trivialInt :: Test.QuickCheck.Gen.Gen GHC.Types.Int
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><L,A>m,
     Unfolding: InlineRule (0, True, True)
                Addition.trivialInt1
                  `cast`
                (Sym (Test.QuickCheck.Gen.N:Gen[0] <GHC.Types.Int>_R)) -}
82e98f6a893fa697f0d4378388207102
  trivialInt1 ::
    Test.QuickCheck.Random.QCGen -> GHC.Types.Int -> GHC.Types.Int
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><L,A>m,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Test.QuickCheck.Random.QCGen) (ds1 :: GHC.Types.Int) ->
                 Addition.genMaybe'5) -}
instance Test.QuickCheck.Arbitrary.Arbitrary [Addition.Trivial]
  = Addition.$fArbitraryTrivial
instance GHC.Classes.Eq [Addition.Trivial] = Addition.$fEqTrivial
instance GHC.Show.Show [Addition.Trivial] = Addition.$fShowTrivial
trusted: none
require own pkg trusted: False
module header:
  Nothing
declaration docs:
arg docs:

