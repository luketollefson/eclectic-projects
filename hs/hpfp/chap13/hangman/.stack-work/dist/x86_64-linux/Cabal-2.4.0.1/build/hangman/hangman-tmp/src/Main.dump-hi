
==================== FINAL INTERFACE ====================
2019-07-06 14:28:05.559998752 UTC

interface main:Main 8065
  interface hash: d406cc1d0ab6b532a6bf3858b20aee49
  ABI hash: 153803a6d7e68a48b113d6e280170be7
  export-list hash: 2096aee85b7e93862353c80f7d2159f4
  orphan hash: bfe6a34d10b2118ec4d6d8b3ed194ec8
  flag hash: cab79460d8b50a23a08afa31a7ad72f6
  opt_hash: 6faf2de08de32d19db9870899d88e59a
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  plugin_hash: ad164012d6b1e14942349d58b1132007
  sig of: Nothing
  used TH splices: False
  where
exports:
  Main.allWords
  Main.alreadyGuessed
  Main.charInWord
  Main.fillInCharacter
  Main.freshPuzzle
  Main.gameOver
  Main.gameWin
  Main.gameWords
  Main.handleGuess
  Main.main
  Main.maxWordLength
  Main.minWordLength
  Main.randomWord
  Main.randomWord'
  Main.renderPuzzleChar
  Main.runGame
  Main.Puzzle{Main.Puzzle}
  Main.WordList{Main.WordList}
module dependencies:
package dependencies: array-0.5.3.0 base-4.12.0.0* deepseq-1.4.4.0
                      ghc-prim-0.5.3 integer-gmp-1.0.2.0 random-1.1* time-1.8.0.2
orphans: time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian base-4.12.0.0:GHC.Float
         base-4.12.0.0:GHC.Base
family instance modules: base-4.12.0.0:Control.Applicative
                         base-4.12.0.0:Data.Complex base-4.12.0.0:Data.Functor.Compose
                         base-4.12.0.0:Data.Functor.Const
                         base-4.12.0.0:Data.Functor.Identity
                         base-4.12.0.0:Data.Functor.Product base-4.12.0.0:Data.Functor.Sum
                         base-4.12.0.0:Data.Monoid base-4.12.0.0:Data.Semigroup
                         base-4.12.0.0:Data.Semigroup.Internal base-4.12.0.0:Data.Version
                         base-4.12.0.0:Data.Void base-4.12.0.0:GHC.Exts
                         base-4.12.0.0:GHC.Generics base-4.12.0.0:GHC.IO.Exception
import  -/  base-4.12.0.0:Control.Monad 07eaec7fd256019b318d048d00f45b1c
import  -/  base-4.12.0.0:Data.Char 74f67fe9150a102afa18766e840f6832
import  -/  base-4.12.0.0:Data.Foldable efb37371da929e7bc88d896298d2d979
import  -/  base-4.12.0.0:Data.List 17d0c71c557e42abe196f130788fd997
import  -/  base-4.12.0.0:Data.Maybe 9b76a39e833465c3c5b3c078b431417f
import  -/  base-4.12.0.0:Data.OldList e931cf456dc87f11ee6e6fb153bca23e
import  -/  base-4.12.0.0:GHC.Base c00b75f0b052d05c55ba6a4dd1c63b26
import  -/  base-4.12.0.0:GHC.List 4014a3c8a3b7c31c8325f6bcf1feea4a
import  -/  base-4.12.0.0:GHC.Num c2039f03637c68f47b0bbff4c18ec616
import  -/  base-4.12.0.0:GHC.Show 838a5d039379d82d9626aae53dfce276
import  -/  base-4.12.0.0:GHC.Unicode 87726eb81a3f9c9b22160a0afd5dc56a
import  -/  base-4.12.0.0:Prelude 3c779dfd6448bdd8e234c336802c2acb
import  -/  base-4.12.0.0:System.Exit 3c945ec7c596067c067092c41083c3d0
import  -/  base-4.12.0.0:System.IO dd4f3cfe73b94b7cae46a4ca98a3f09f
import  -/  ghc-prim-0.5.3:GHC.Classes 0f6fd7d7db53fc48f6e1f01803cc6c9d
import  -/  ghc-prim-0.5.3:GHC.Types 57064c9f957b09bc2e360061ad5cae0b
import  -/  random-1.1:System.Random c6898761a03910f08acbe56f79c5fa96
267087a13dc154414e91a842ff8be64e
  $fEqWordList :: GHC.Classes.Eq Main.WordList
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Main.WordList
                  GHC.Classes.$fEq[]_$s$c==1
                    `cast`
                  (Sym (Main.N:WordList[0])
                   ->_R Sym (Main.N:WordList[0])
                   ->_R <GHC.Types.Bool>_R)
                  Main.$fEqWordList_$s$fEq[]_$c/=
                    `cast`
                  (Sym (Main.N:WordList[0])
                   ->_R Sym (Main.N:WordList[0])
                   ->_R <GHC.Types.Bool>_R) -}
531cc7e3448ef7ca7fce152a1cf96d86
  $fEqWordList_$s$fEq[]_$c/= ::
    [[GHC.Types.Char]] -> [[GHC.Types.Char]] -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: [[GHC.Types.Char]]) (y :: [[GHC.Types.Char]]) ->
                 case GHC.Classes.$fEq[]_$s$c==1 x y of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
5c04c7c7c65673a8fb928c279b95c3b9
  $fShowPuzzle :: GHC.Show.Show Main.Puzzle
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Main.Puzzle
                  Main.$fShowPuzzle_$cshowsPrec
                  Main.$fShowPuzzle_$cshow
                  Main.$fShowPuzzle_$cshowList -}
5c04c7c7c65673a8fb928c279b95c3b9
  $fShowPuzzle1 :: Main.Puzzle -> GHC.Base.String -> [GHC.Types.Char]
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(LSL),1*U(A,1*U,U)><L,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Main.Puzzle) (s :: GHC.Base.String)[OneShot] ->
                 GHC.Base.augment
                   @ GHC.Types.Char
                   (\ @ b
                      (c :: GHC.Types.Char -> b -> b)[OneShot]
                      (n :: b)[OneShot] ->
                    GHC.Base.foldr
                      @ GHC.Types.Char
                      @ b
                      c
                      n
                      (Main.$fShowPuzzle_$cshow x))
                   s) -}
1eb79a4c69fd077b64d53c8b10d4cb71
  $fShowPuzzle2 :: GHC.Types.Char
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.C# ' '#) -}
682990eb0b1f84648546000739a60940
  $fShowPuzzle3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: (" Guessed so far: "#) -}
5c04c7c7c65673a8fb928c279b95c3b9
  $fShowPuzzle_$cshow :: Main.Puzzle -> GHC.Base.String
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LSL),1*U(A,1*U,U)>,
     Inline: [2],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Main.Puzzle) ->
                 case w of ww { Main.Puzzle ww1 ww2 ww3 ->
                 Main.$w$cshow ww2 ww3 }) -}
5c04c7c7c65673a8fb928c279b95c3b9
  $fShowPuzzle_$cshowList :: [Main.Puzzle] -> GHC.Show.ShowS
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Main.Puzzle]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__ @ Main.Puzzle Main.$fShowPuzzle1 ls s) -}
5c04c7c7c65673a8fb928c279b95c3b9
  $fShowPuzzle_$cshowsPrec ::
    GHC.Types.Int -> Main.Puzzle -> GHC.Show.ShowS
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,A><S(LSL),1*U(A,1*U,U)><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ (ds :: GHC.Types.Int)
                   (x :: Main.Puzzle)
                   (s :: GHC.Base.String) ->
                 GHC.Base.augment
                   @ GHC.Types.Char
                   (\ @ b
                      (c :: GHC.Types.Char -> b -> b)[OneShot]
                      (n :: b)[OneShot] ->
                    GHC.Base.foldr
                      @ GHC.Types.Char
                      @ b
                      c
                      n
                      (Main.$fShowPuzzle_$cshow x))
                   s) -}
267087a13dc154414e91a842ff8be64e
  $fShowWordList :: GHC.Show.Show Main.WordList
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Main.WordList
                  Main.$fShowWordList_$cshowsPrec
                  Main.$fShowWordList_$cshow
                  Main.$fShowWordList_$cshowList -}
267087a13dc154414e91a842ff8be64e
  $fShowWordList1 :: Main.WordList -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <L,1*U><L,U>,
     Unfolding: (\ (w :: Main.WordList) (w1 :: GHC.Base.String) ->
                 Main.$w$cshowsPrec 0# w w1) -}
19af0f92b4c4e1e0e83b145cc234bd8d
  $fShowWordList2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("WordList "#) -}
7afbe5fa7fe981401406c9bbca2cdcc7
  $fShowWordList3 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
267087a13dc154414e91a842ff8be64e
  $fShowWordList_$cshow :: Main.WordList -> GHC.Base.String
  {- Arity: 1, Strictness: <L,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Main.WordList) ->
                 Main.$fShowWordList_$cshowsPrec
                   Main.$fShowWordList3
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
267087a13dc154414e91a842ff8be64e
  $fShowWordList_$cshowList :: [Main.WordList] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Main.WordList]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__ @ Main.WordList Main.$fShowWordList1 ls s) -}
267087a13dc154414e91a842ff8be64e
  $fShowWordList_$cshowsPrec ::
    GHC.Types.Int -> Main.WordList -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S(S),1*U(U)><L,1*U><L,U>, Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Main.WordList)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Main.$w$cshowsPrec ww1 w1 w2 }) -}
fbbecdf5ccc2e4fe8b974f0748a3b5a6
  $tc'Puzzle :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1873292189318166999##
                   791087988565883416##
                   Main.$trModule
                   Main.$tc'Puzzle2
                   0#
                   Main.$tc'Puzzle1) -}
d093121dd670eab1ca9b1b06d75d8b01
  $tc'Puzzle1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
d9b1498d5933e26ee3d9e9be172c3590
  $tc'Puzzle2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tc'Puzzle3) -}
ccbb1a941a4a1338e58cfa4d6ed22d08
  $tc'Puzzle3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Puzzle"#) -}
080da42e9601bed5877486325d2a36ef
  $tc'WordList :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3904288008419924389##
                   14454546364813920847##
                   Main.$trModule
                   Main.$tc'WordList2
                   0#
                   Main.$tc'WordList1) -}
3a049a0cd4be61d188b81165335434a7
  $tc'WordList1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
d86680284c7208b5b61165b01fa683a6
  $tc'WordList2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tc'WordList3) -}
1810601c082f18914298ccd92bd90fc5
  $tc'WordList3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'WordList"#) -}
c6447237c727061c30ef9af9dd160a01
  $tcPuzzle :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12504372730337297243##
                   8030320636282516161##
                   Main.$trModule
                   Main.$tcPuzzle1
                   0#
                   GHC.Types.krep$*) -}
db6e5305d375d6004bdffcb5476d7958
  $tcPuzzle1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tcPuzzle2) -}
3a89c5d17146444839a59b635f302ab7
  $tcPuzzle2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Puzzle"#) -}
e056998e6236a937dcb945d5d4397ed9
  $tcWordList :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6054959742569563817##
                   6808854062696202102##
                   Main.$trModule
                   Main.$tcWordList1
                   0#
                   GHC.Types.krep$*) -}
ecf4990400349628271ed918b0bd5729
  $tcWordList1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tcWordList2) -}
0efb3ab4f38ab4e8e3d9440fac30aca6
  $tcWordList2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("WordList"#) -}
be86c9d078d3acbf19ba91fe74a24273
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Main.$trModule3 Main.$trModule1) -}
b09d86f2c49dd5176b544d8d13ddb6c5
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$trModule2) -}
e5875966b74dad2d29772660b8a75e33
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Main"#) -}
23b03bd7d075a00f5ad1ee10e6add7b8
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$trModule4) -}
d026be77cb9ced20e35a61514e0458aa
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("main"#) -}
bc44fa126f9e6a234df7a8291d488693
  $w$cshow ::
    [GHC.Maybe.Maybe GHC.Types.Char]
    -> [GHC.Types.Char] -> GHC.Base.String
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U>, Inline: [2],
     Unfolding: (\ (ww :: [GHC.Maybe.Maybe GHC.Types.Char])
                   (ww1 :: [GHC.Types.Char]) ->
                 case GHC.Base.map
                        @ (GHC.Maybe.Maybe GHC.Types.Char)
                        @ GHC.Types.Char
                        Main.renderPuzzleChar
                        ww of wild {
                   [] -> GHC.CString.unpackAppendCString# Main.$fShowPuzzle3 ww1
                   : x xs
                   -> GHC.Base.++_$s++
                        @ GHC.Types.Char
                        (GHC.CString.unpackAppendCString# Main.$fShowPuzzle3 ww1)
                        x
                        (Data.OldList.prependToAll
                           @ GHC.Types.Char
                           Main.$fShowPuzzle2
                           xs) }) -}
267087a13dc154414e91a842ff8be64e
  $w$cshowsPrec ::
    GHC.Prim.Int#
    -> Main.WordList -> GHC.Base.String -> GHC.Base.String
  {- Arity: 3, Strictness: <S,U><L,1*U><L,U>, Inline: [2],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (w :: Main.WordList)
                   (w1 :: GHC.Base.String) ->
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,U> -}
                   = \ (x :: GHC.Base.String)[OneShot] ->
                     GHC.CString.unpackAppendCString#
                       Main.$fShowWordList2
                       (case w `cast` (Main.N:WordList[0]) of wild {
                          [] -> GHC.CString.unpackAppendCString# GHC.Show.showList__4 x
                          : x1 xs
                          -> GHC.Types.:
                               @ GHC.Types.Char
                               GHC.Show.showList__3
                               (GHC.Types.:
                                  @ GHC.Types.Char
                                  GHC.Show.$fShow(,)3
                                  (GHC.Show.showLitString
                                     x1
                                     (GHC.Types.:
                                        @ GHC.Types.Char
                                        GHC.Show.$fShow(,)3
                                        (let {
                                           lvl43 :: [GHC.Types.Char]
                                           = GHC.Types.: @ GHC.Types.Char GHC.Show.showList__2 x
                                         } in
                                         letrec {
                                           showl :: [[GHC.Types.Char]] -> GHC.Base.String
                                             {- Arity: 1, Strictness: <S,1*U> -}
                                           = \ (ds2 :: [[GHC.Types.Char]]) ->
                                             case ds2 of wild1 {
                                               [] -> lvl43
                                               : y ys
                                               -> GHC.Types.:
                                                    @ GHC.Types.Char
                                                    GHC.Show.showList__1
                                                    (GHC.Types.:
                                                       @ GHC.Types.Char
                                                       GHC.Show.$fShow(,)3
                                                       (GHC.Show.showLitString
                                                          y
                                                          (GHC.Types.:
                                                             @ GHC.Types.Char
                                                             GHC.Show.$fShow(,)3
                                                             (showl ys)))) }
                                         } in
                                         showl xs)))) })
                 } in
                 case GHC.Prim.>=# ww 11# of lwild {
                   DEFAULT -> p w1
                   1#
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.$fShow(,)4
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 w1)) }) -}
59c0ff2f80922f6030444b2bcdb643b8
  $wfillInCharacter ::
    GHC.Base.String
    -> [GHC.Maybe.Maybe GHC.Types.Char]
    -> [GHC.Types.Char]
    -> GHC.Types.Char
    -> (# GHC.Base.String, [GHC.Maybe.Maybe GHC.Types.Char],
          [GHC.Types.Char] #)
  {- Arity: 4, HasNoCafRefs, Strictness: <L,U><L,1*U><L,U><L,U(U)>,
     Inline: [2],
     Unfolding: (\ (ww :: GHC.Base.String)
                   (ww1 :: [GHC.Maybe.Maybe GHC.Types.Char])
                   (ww2 :: [GHC.Types.Char])
                   (w :: GHC.Types.Char) ->
                 (# ww,
                    letrec {
                      go2 :: [GHC.Types.Char]
                             -> [GHC.Maybe.Maybe GHC.Types.Char]
                             -> [GHC.Maybe.Maybe GHC.Types.Char]
                        {- Arity: 2, Strictness: <S,1*U><L,1*U> -}
                      = \ (ds :: [GHC.Types.Char])
                          (ds1 :: [GHC.Maybe.Maybe GHC.Types.Char]) ->
                        case ds of wild {
                          [] -> GHC.Types.[] @ (GHC.Maybe.Maybe GHC.Types.Char)
                          : ipv ipv1
                          -> case ds1 of wild1 {
                               [] -> GHC.Types.[] @ (GHC.Maybe.Maybe GHC.Types.Char)
                               : ipv2 ipv3
                               -> GHC.Types.:
                                    @ (GHC.Maybe.Maybe GHC.Types.Char)
                                    (case ipv of wild2 { GHC.Types.C# x ->
                                     case w of wild3 { GHC.Types.C# y ->
                                     case GHC.Prim.eqChar# x y of lwild {
                                       DEFAULT -> ipv2
                                       1# -> GHC.Maybe.Just @ GHC.Types.Char wild2 } } })
                                    (go2 ipv1 ipv3) } }
                    } in
                    go2 ww ww1,
                    GHC.Types.: @ GHC.Types.Char w ww2 #)) -}
5b89a31ea8c5d86fbd3181211cbe423b
  $wgameOver ::
    GHC.Base.String
    -> [GHC.Types.Char]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 3, Strictness: <L,U><S,1*U><S,U>, Inline: [2],
     Unfolding: (\ (ww :: GHC.Base.String)
                   (ww1 :: [GHC.Types.Char])
                   (w :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 let {
                   $j :: GHC.Prim.Int# -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                     <join 1> {- Arity: 1, Strictness: <S,U> -}
                   = \ (ww2 :: GHC.Prim.Int#)[OneShot] ->
                     case GHC.Prim.># ww2 7# of lwild {
                       DEFAULT -> (# w, GHC.Tuple.() #)
                       1#
                       -> case (GHC.IO.Handle.Text.hPutStr'
                                  GHC.IO.Handle.FD.stdout
                                  Main.gameOver3
                                  GHC.Types.True)
                                 `cast`
                               (GHC.Types.N:IO[0] <()>_R)
                                 w of ds1 { (#,#) ipv ipv1 ->
                          case (GHC.IO.Handle.Text.hPutStr'
                                  GHC.IO.Handle.FD.stdout
                                  (GHC.CString.unpackAppendCString# Main.gameOver2 ww)
                                  GHC.Types.True)
                                 `cast`
                               (GHC.Types.N:IO[0] <()>_R)
                                 ipv of ds2 { (#,#) ipv2 ipv3 ->
                          System.Exit.exitSuccess1 @ () ipv2 } } }
                 } in
                 letrec {
                   $wgo :: [GHC.Types.Char]
                           -> GHC.Prim.Int# -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                     <join 2> {- Arity: 2, Strictness: <S,1*U><S,U>, Inline: [2] -}
                   = \ (w1 :: [GHC.Types.Char]) (ww2 :: GHC.Prim.Int#) ->
                     case w1 of wild {
                       [] -> $j ww2
                       : y ys
                       -> case GHC.List.elem
                                 @ GHC.Types.Char
                                 GHC.Classes.$fEqChar
                                 y
                                 ww of wild1 {
                            GHC.Types.False -> $wgo ys (GHC.Prim.+# ww2 1#)
                            GHC.Types.True -> $wgo ys ww2 } }
                 } in
                 $wgo ww1 0#) -}
2650208386c14aac84e1612737018070
  $wgameWin ::
    [GHC.Maybe.Maybe GHC.Types.Char]
    -> [GHC.Types.Char]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 3, Strictness: <S,U><L,U><S,U>, Inline: [2],
     Unfolding: (\ (ww :: [GHC.Maybe.Maybe GHC.Types.Char])
                   (ww1 :: [GHC.Types.Char])
                   (w :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 let {
                   exit :: (# GHC.Prim.State# GHC.Prim.RealWorld, () #) <join 0>
                   = (# w, GHC.Tuple.() #)
                 } in
                 let {
                   $j :: (# GHC.Prim.State# GHC.Prim.RealWorld, () #) <join 0>
                   = case (GHC.IO.Handle.Text.hPutStr'
                             GHC.IO.Handle.FD.stdout
                             (GHC.CString.unpackAppendCString#
                                Main.gameWin4
                                (Main.$w$cshow ww ww1))
                             GHC.Types.True)
                            `cast`
                          (GHC.Types.N:IO[0] <()>_R)
                            w of ds1 { (#,#) ipv ipv1 ->
                     case (GHC.IO.Handle.Text.hPutStr'
                             GHC.IO.Handle.FD.stdout
                             Main.gameWin2
                             GHC.Types.True)
                            `cast`
                          (GHC.Types.N:IO[0] <()>_R)
                            ipv of ds2 { (#,#) ipv2 ipv3 ->
                     System.Exit.exitSuccess1 @ () ipv2 } }
                 } in
                 letrec {
                   go1 :: [GHC.Maybe.Maybe GHC.Types.Char]
                          -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                     <join 1> {- Arity: 1, Strictness: <S,1*U> -}
                   = \ (ds :: [GHC.Maybe.Maybe GHC.Types.Char]) ->
                     case ds of wild {
                       [] -> $j
                       : y ys
                       -> case y of wild1 {
                            GHC.Maybe.Nothing -> exit GHC.Maybe.Just ipv -> go1 ys } }
                 } in
                 go1 ww) -}
61f5110ce678ac203c2f9a121f344158
  $wrunGame ::
    GHC.Base.String
    -> [GHC.Maybe.Maybe GHC.Types.Char]
    -> [GHC.Types.Char]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 4, Strictness: <L,U><S,U><L,U><S,U>, Inline: [2] -}
5c04c7c7c65673a8fb928c279b95c3b9
  data Puzzle
    = Puzzle GHC.Base.String
             [GHC.Maybe.Maybe GHC.Types.Char]
             [GHC.Types.Char]
267087a13dc154414e91a842ff8be64e
  newtype WordList = WordList [GHC.Base.String]
682f9106f0e82d4914bf66c7af48d6b2
  allWords :: GHC.Types.IO Main.WordList
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.allWords1
                  `cast`
                (Sym (GHC.Types.N:IO[0] <Main.WordList>_R)) -}
588a62b5fcab8d3d550e178a6ae9b3a9
  allWords1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Main.WordList #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case GHC.IO.Handle.FD.openFile1
                        Main.allWords2
                        GHC.IO.IOMode.ReadMode
                        s of ds1 { (#,#) ipv ipv1 ->
                 case GHC.IO.Handle.Text.hGetContents1
                        ipv1
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 (# ipv2,
                    (Data.OldList.lines ipv3)
                      `cast`
                    (Sym (Main.N:WordList[0])) #) } }) -}
6aceb2763e61d5b4e5e48b51ec209407
  allWords2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.allWords3) -}
173b643b86f52a5163d56d21c4b0c4a1
  allWords3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("data/dict-small.txt"#) -}
3e7b316337be489e582f130564907eee
  alreadyGuessed :: Main.Puzzle -> GHC.Types.Char -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S(LLS),1*U(A,A,1*U)><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: Main.Puzzle) (c :: GHC.Types.Char) ->
                 case ds of wild { Main.Puzzle ds1 ds2 guessed ->
                 GHC.List.elem @ GHC.Types.Char GHC.Classes.$fEqChar c guessed }) -}
9fbe991ad8ad5025c626c8920d475eb2
  charInWord :: Main.Puzzle -> GHC.Types.Char -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S(SLL),1*U(1*U,A,A)><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: Main.Puzzle) (c :: GHC.Types.Char) ->
                 case ds of wild { Main.Puzzle word ds1 ds2 ->
                 GHC.List.elem @ GHC.Types.Char GHC.Classes.$fEqChar c word }) -}
ab8d0af7337254b5954433d00a4b756d
  fillInCharacter :: Main.Puzzle -> GHC.Types.Char -> Main.Puzzle
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U,1*U,U)><L,U(U)>m,
     Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Main.Puzzle) (w1 :: GHC.Types.Char) ->
                 case w of ww { Main.Puzzle ww1 ww2 ww3 ->
                 case Main.$wfillInCharacter
                        ww1
                        ww2
                        ww3
                        w1 of ww4 { (#,,#) ww5 ww6 ww7 ->
                 Main.Puzzle ww5 ww6 ww7 } }) -}
bab3d8a601fe6c8f2286547c4a8f335f
  freshPuzzle :: GHC.Base.String -> Main.Puzzle
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m,
     Unfolding: InlineRule (1, True, False)
                (\ (word :: GHC.Base.String) ->
                 Main.Puzzle
                   word
                   (GHC.Base.build
                      @ (GHC.Maybe.Maybe GHC.Types.Char)
                      (\ @ b1
                         (c :: GHC.Maybe.Maybe GHC.Types.Char -> b1 -> b1)[OneShot]
                         (n :: b1)[OneShot] ->
                       GHC.Base.foldr
                         @ GHC.Types.Char
                         @ b1
                         (GHC.Base.mapFB
                            @ (GHC.Maybe.Maybe GHC.Types.Char)
                            @ b1
                            @ GHC.Types.Char
                            c
                            Main.freshPuzzle1)
                         n
                         word))
                   (GHC.Types.[] @ GHC.Types.Char)) -}
cb7ab0b9e54d135854b6544e4afe936a
  freshPuzzle1 :: GHC.Types.Char -> GHC.Maybe.Maybe GHC.Types.Char
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ (ds :: GHC.Types.Char) -> GHC.Maybe.Nothing @ GHC.Types.Char) -}
ecd3d2aeeaf3857a29f6938de0b3540f
  gameOver :: Main.Puzzle -> GHC.Types.IO ()
  {- Arity: 2, Strictness: <S(LLS),1*U(U,A,1*U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.gameOver1
                  `cast`
                (<Main.Puzzle>_R ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
76001c2e8d526731605d5946396a70ea
  gameOver1 ::
    Main.Puzzle
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2, Strictness: <S(LLS),1*U(U,A,1*U)><S,U>, Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Main.Puzzle) (w1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case w of ww { Main.Puzzle ww1 ww2 ww3 ->
                 Main.$wgameOver ww1 ww3 w1 }) -}
8103aea40525bc36cedd09ff2478bf1d
  gameOver2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("The word was: "#) -}
fe2237f68d34dbc4faf84e98e7ab397c
  gameOver3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.gameOver4) -}
b26759bb9ca8fc3d3cbdf8b6bd691fe1
  gameOver4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("You lose!"#) -}
e8d4daf779f7908cf2216d65346f323c
  gameWin :: Main.Puzzle -> GHC.Types.IO ()
  {- Arity: 2, Strictness: <S(LSL),1*U(A,U,U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.gameWin1
                  `cast`
                (<Main.Puzzle>_R ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
70742f4283dada58fd046e62c710a736
  gameWin1 ::
    Main.Puzzle
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2, Strictness: <S(LSL),1*U(A,U,U)><S,U>, Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Main.Puzzle) (w1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case w of ww { Main.Puzzle ww1 ww2 ww3 ->
                 Main.$wgameWin ww2 ww3 w1 }) -}
ea5f1fd9567f04155ba99ac55c790a1b
  gameWin2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.gameWin3) -}
7fb334eeb9461271fd8dcb18752ffc84
  gameWin3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("You win!"#) -}
77e3cc0b28141488aefc4653fe06b5c4
  gameWin4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Current puzzle is: "#) -}
c0942cf1994c64eb8c44365d9c63fc11
  gameWords :: GHC.Types.IO Main.WordList
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.gameWords1
                  `cast`
                (Sym (GHC.Types.N:IO[0] <Main.WordList>_R)) -}
04e39c758aa27c6abcd3722e29377c7f
  gameWords1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Main.WordList #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case GHC.IO.Handle.FD.openFile1
                        Main.allWords2
                        GHC.IO.IOMode.ReadMode
                        s of ds1 { (#,#) ipv ipv1 ->
                 case GHC.IO.Handle.Text.hGetContents1
                        ipv1
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 (# ipv2,
                    (GHC.List.filter
                       @ [GHC.Types.Char]
                       Main.gameWords2
                       (Data.OldList.lines ipv3))
                      `cast`
                    (Sym (Main.N:WordList[0])) #) } }) -}
a7e34cacdced14d3ff6cc596f69d371f
  gameWords2 :: [GHC.Types.Char] -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: (\ (w :: [GHC.Types.Char]) ->
                 case GHC.List.$wlenAcc @ GHC.Types.Char w 0# of ww2 { DEFAULT ->
                 case GHC.Prim.>=# ww2 5# of lwild {
                   DEFAULT -> GHC.Types.False
                   1#
                   -> GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<# ww2 9#) } }) -}
1f34e41c4b1ec898704b435bd81c0138
  handleGuess ::
    Main.Puzzle -> GHC.Types.Char -> GHC.Types.IO Main.Puzzle
  {- Arity: 3, Strictness: <L,1*U(U,U,U)><L,U(U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.handleGuess1
                  `cast`
                (<Main.Puzzle>_R
                 ->_R <GHC.Types.Char>_R
                 ->_R Sym (GHC.Types.N:IO[0] <Main.Puzzle>_R)) -}
ba48e9ef4f180792ab7aa0f68fda81a2
  handleGuess1 ::
    Main.Puzzle
    -> GHC.Types.Char
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Main.Puzzle #)
  {- Arity: 3, Strictness: <L,1*U(U,U,U)><L,U(U)><S,U>,
     Unfolding: (\ (puzzle :: Main.Puzzle)
                   (guess :: GHC.Types.Char)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case (GHC.IO.Handle.Text.hPutStr'
                         GHC.IO.Handle.FD.stdout
                         (GHC.CString.unpackAppendCString#
                            Main.handleGuess8
                            (GHC.Types.:
                               @ GHC.Types.Char
                               guess
                               (GHC.Types.[] @ GHC.Types.Char)))
                         GHC.Types.True)
                        `cast`
                      (GHC.Types.N:IO[0] <()>_R)
                        s of ds1 { (#,#) ipv ipv1 ->
                 case puzzle of wild { Main.Puzzle ds ds2 guessed ->
                 case GHC.List.elem
                        @ GHC.Types.Char
                        GHC.Classes.$fEqChar
                        guess
                        guessed of wild1 {
                   GHC.Types.False
                   -> case GHC.List.elem
                             @ GHC.Types.Char
                             GHC.Classes.$fEqChar
                             guess
                             ds of wild2 {
                        GHC.Types.False
                        -> case (GHC.IO.Handle.Text.hPutStr'
                                   GHC.IO.Handle.FD.stdout
                                   Main.handleGuess6
                                   GHC.Types.True)
                                  `cast`
                                (GHC.Types.N:IO[0] <()>_R)
                                  ipv of ds3 { (#,#) ipv2 ipv3 ->
                           (# ipv2,
                              case Main.$wfillInCharacter
                                     ds
                                     ds2
                                     guessed
                                     guess of ww { (#,,#) ww1 ww2 ww3 ->
                              Main.Puzzle ww1 ww2 ww3 } #) }
                        GHC.Types.True
                        -> case (GHC.IO.Handle.Text.hPutStr'
                                   GHC.IO.Handle.FD.stdout
                                   Main.handleGuess4
                                   GHC.Types.True)
                                  `cast`
                                (GHC.Types.N:IO[0] <()>_R)
                                  ipv of ds3 { (#,#) ipv2 ipv3 ->
                           (# ipv2,
                              case Main.$wfillInCharacter
                                     ds
                                     ds2
                                     guessed
                                     guess of ww { (#,,#) ww1 ww2 ww3 ->
                              Main.Puzzle ww1 ww2 ww3 } #) } }
                   GHC.Types.True
                   -> case (GHC.IO.Handle.Text.hPutStr'
                              GHC.IO.Handle.FD.stdout
                              Main.handleGuess2
                              GHC.Types.True)
                             `cast`
                           (GHC.Types.N:IO[0] <()>_R)
                             ipv of ds3 { (#,#) ipv2 ipv3 ->
                      (# ipv2, wild #) } } } }) -}
6c3b52c51b7912aedbf8cdc958a1e103
  handleGuess2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.handleGuess3) -}
50f4c2f4aca51017b199f4d3c342dffa
  handleGuess3 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("You already guessed that character, pick something else!"#) -}
c9ba65c94004afc527ff7bfe0ec5584c
  handleGuess4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.handleGuess5) -}
d05c570bdcba6a106d512098e16467cf
  handleGuess5 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("This character was in the word, filling in the word accordingly"#) -}
f8f48216526798efc285abc9d27b79a9
  handleGuess6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.handleGuess7) -}
f03915b80740193decfdd50329c501e6
  handleGuess7 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("This character wasn't in the word, try again."#) -}
1fc6081417102a9dc6d7b06eb14d87f6
  handleGuess8 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Your guess was: "#) -}
b4f9ae97a091b232a88173a93240314d
  main :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
529073e95d7e97cca9b9c5c633464b51
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U> -}
99daeed6096e4af3040fe9786d83ebc9
  main2 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.TopHandler.runMainIO1
                   @ ()
                   Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R))) -}
a84a0dfa79de3fd10b33dfb1eb5d2e56
  maxWordLength :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 9#) -}
7317e042e4c3405b83283bb6ddadb7ce
  minWordLength :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 5#) -}
ce0aec8eb5f427275c12b6e5fcb55dc8
  randomWord :: Main.WordList -> GHC.Types.IO GHC.Base.String
  {- Arity: 2, Strictness: <L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.randomWord1
                  `cast`
                (<Main.WordList>_R
                 ->_R Sym (GHC.Types.N:IO[0] <GHC.Base.String>_R)) -}
eeeb023d43aba6e92c934e55e7c17aa5
  randomWord' :: GHC.Types.IO GHC.Base.String
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.randomWord'1
                  `cast`
                (Sym (GHC.Types.N:IO[0] <GHC.Base.String>_R)) -}
bea9e7a341c36ad040f1a81a1470f166
  randomWord'1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Base.String #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case GHC.IO.Handle.FD.openFile1
                        Main.allWords2
                        GHC.IO.IOMode.ReadMode
                        s of ds1 { (#,#) ipv ipv1 ->
                 case GHC.IO.Handle.Text.hGetContents1
                        ipv1
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 Main.randomWord1
                   (GHC.List.filter
                      @ [GHC.Types.Char]
                      Main.gameWords2
                      (Data.OldList.lines ipv3))
                     `cast`
                   (Sym (Main.N:WordList[0]))
                   ipv2 } }) -}
e26eb37c78aa930c821f91ed078310d7
  randomWord1 ::
    Main.WordList
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Base.String #)
  {- Arity: 2, Strictness: <L,U><S,U>,
     Unfolding: (\ (ds :: Main.WordList)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case System.Random.$fRandomInt3
                        (Main.$fShowWordList3,
                         case GHC.List.$wlenAcc
                                @ [GHC.Types.Char]
                                ds `cast` (Main.N:WordList[0])
                                0# of ww2 { DEFAULT ->
                         GHC.Types.I# (GHC.Prim.-# ww2 1#) })
                        s of ds1 { (#,#) ipv ipv1 ->
                 (# ipv,
                    GHC.List.!!
                      @ GHC.Base.String
                      ds `cast` (Main.N:WordList[0])
                      ipv1 #) }) -}
01ac76ca10fe2d77583193ea928836e0
  renderPuzzleChar ::
    GHC.Maybe.Maybe GHC.Types.Char -> GHC.Types.Char
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: GHC.Maybe.Maybe GHC.Types.Char) ->
                 case ds of wild {
                   GHC.Maybe.Nothing -> Main.renderPuzzleChar1
                   GHC.Maybe.Just c -> c }) -}
82b402978805b229abf1e01b5a7db1d3
  renderPuzzleChar1 :: GHC.Types.Char
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.C# '_'#) -}
019cf898243e3243c3bf8fdda588c02c
  runGame :: Main.Puzzle -> GHC.Types.IO ()
  {- Arity: 2, Strictness: <S(LSL),1*U(U,U,U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.runGame1
                  `cast`
                (<Main.Puzzle>_R ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
edd7af9089652847175d7d8172fa1a47
  runGame1 ::
    Main.Puzzle
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2, Strictness: <S(LSL),1*U(U,U,U)><S,U>, Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Main.Puzzle) (w1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case w of ww { Main.Puzzle ww1 ww2 ww3 ->
                 Main.$wrunGame ww1 ww2 ww3 w1 }) -}
instance [safe] GHC.Classes.Eq [Main.WordList] = Main.$fEqWordList
instance [safe] GHC.Show.Show [Main.Puzzle] = Main.$fShowPuzzle
instance [safe] GHC.Show.Show [Main.WordList] = Main.$fShowWordList
"SPEC/Main $fEq[]_$c/= @ [Char]" [orphan] forall ($dEq :: GHC.Classes.Eq
                                                            [GHC.Types.Char])
  GHC.Classes.$fEq[]_$c/= @ [GHC.Types.Char] $dEq
  = Main.$fEqWordList_$s$fEq[]_$c/=
trusted: safe
require own pkg trusted: False
module header:
  Nothing
declaration docs:
arg docs:

